name: UAV Assessment CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  DOCKER_IMAGE: uav-assessment-env:ci

jobs:
  sim-tests:
    runs-on: ubuntu-latest
    steps:
      # 1) Kodunuzu çekin
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      # 2) Buildx kurulumu
      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Docker imajını oluşturun (cache’li)
      - name: 🐳 Build container
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      # 4) Task 1 – Arm/Disarm testi
      - name: 🚀 Run Task 1 – Arm/Disarm
        id: task1
        continue-on-error: true
        run: |
          docker run --rm -t ${{ env.DOCKER_IMAGE }} bash -lc '
            cd /ros2_ws
            # Yalnızca test_package derle
            colcon build --symlink-install --packages-select test_package
            # overlay ortamını yükle
            source install/setup.bash
            # pytest -k filtresiyle sadece arm/disarm testini çalıştır
            colcon test --packages-select test_package \
              --event-handlers console_direct+ \
              --pytest-args "-k" \
              --pytest-args "test_arm_disarm_edge" \
              --pytest-args "-s" \
              --pytest-args "-v"
            colcon test-result --verbose
          '

      # 5) Task 2 – Take-off/Land testi
      - name: 🚀 Run Task 2 – Take-off/Land
        id: task2
        continue-on-error: true
        run: |
          docker run --rm -t ${{ env.DOCKER_IMAGE }} bash -lc '
            cd /ros2_ws
            colcon build --symlink-install --packages-select test_package
            source install/setup.bash
            colcon test --packages-select test_package \
              --event-handlers console_direct+ \
              --pytest-args "-k" \
              --pytest-args "test_takeoff_and_land_sequence" \
              --pytest-args "-s" \
              --pytest-args "-v"
            colcon test-result --verbose
          '

      # 6) Sonuç özeti
      - name: 📊 Generate summary
        if: always()
        run: |
          {
            echo "## 📝 UAV Assessment Report"
            echo
            if [[ "${{ steps.task1.outcome }}" == "success" ]]; then
              echo "### ✅ Task 1 (Arm/Disarm) PASS"
            else
              echo "### ❌ Task 1 (Arm/Disarm) FAIL"
            fi
            if [[ "${{ steps.task2.outcome }}" == "success" ]]; then
              echo "### ✅ Task 2 (Take-off/Land) PASS"
            else
              echo "### ❌ Task 2 (Take-off/Land) FAIL"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
